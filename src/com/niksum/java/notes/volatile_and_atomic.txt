The effect of the volatile keyword is approximately that each individual read or write operation on that variable is atomic.

Notably, however, an operation that requires more than one read/write -- such as i++, which is equivalent to i = i + 1, 
which does one read and one write -- is not atomic, since another thread may write to i between the read and the write.

The Atomic classes, like AtomicInteger and AtomicReference, provide a wider variety of operations atomically, 
specifically including increment for AtomicInteger.


=======================================================================
There are two important concepts in multithreading environment.

atomicity
visibility

Volatile eradicates visibility problem but it does not deal with atomicity.
 Volatile will prevent compiler to reorder the instruction which involves write and subsequent read of a volatile variable. 
 e.g. k++ Here k++ is not a single machine instruction rather it is three machine instructions.

copy the value to register
increment it
place it back
So even though you declare variable to volatile it will not make this operation atomic, 
which means another thread can see a intermediate result which is a stale or unwanted value for the other thread.

But AtomicInteger, AtomicReference are based on the Compare and swap instruction. 
CAS has three operands: a memory location V on which to operate, the expected old value A, and the new value B. 
CAS atomically updates V to the new value B, but only if the value in V matches the expected old value A; otherwise it does nothing. 
In either case, it returns the value currently in V. This is used by JVM in AtomicInteger, AtomicReference and they call the function as compareAndSet(). 
If this functionality is not supported by underlying processor then JVM implements it by spin lock.